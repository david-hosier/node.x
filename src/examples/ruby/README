Node.x Ruby Examples
====================

Prerequisites:

1) The bin directory from the distro must be on your PATH - this should have been done as part of the install procedure.

2) JRuby must be installed and the bin directory on your PATH as per the JRuby installation instructions

3) JDK/JRE 1.7.0+ must be installed and the JDK/JRE bin directory must be on your PATH

Run an example by invoking:

nodex-ruby <example ruby script>

where <example ruby script> is, for example, echo/echo_server.rb

There now follows a description of all the available examples:

Echo Server + Client
====================

A simple echo server which echos back any sent to it

To run the server:

nodex-ruby echo/echo_server.rb

Then either telnet localhost 8080 and notice how text entered via telnet is echoed back

Instead of telnet you can also run a simple echo client:

nodex-ruby echo/echo_client.rb

Fanout Server
=============

Fans out all data received on any one connection to all other connections.

To run the server:

nodex-ruby fanout/fanout_server.rb

Then telnet localhost 8080 from different consoles. Note how data entered in telnet is echoed to all connected connections

HTTP
====

A simple HTTP server which just returns some hard-coded HTML to the client, and a simple HTTP client which sends a GET
request and displays the response it receives.

To run the server:

nodex-ruby http/http_server.rb

Then point your browser at http://localhost:8080

Alternatively, you can also run the HTTP client:

nodex-ruby http/http_client.rb

HTTPS
=====

Like the HTTP example, but using HTTPS

To run the server:

nodex-ruby https/https_server.rb

Then point your browser at http://localhost:4443

Alternatively, you can also run the HTTPS client:

nodex-ruby https/https_client.rb

You'll get a warning from your browser since the server certificate the server is using is not known to it, that's
normal.

Proxy
=====

A very simple HTTP proxy which simply proxies requests/response from a client to a server and back again.

It includes

a) A simple http server which just takes the request and sends back a response in 10 chunks

b) A simple http client which sends a http request with 10 chunks (via the proxy server), and displays any
response it receives

c) A proxy server which simply sits in the middle proxying requests and responses between client and server

To run, open three consoles.

In console 1, run the http server:

nodex-ruby proxy/http_server.rb

In console 2, run the proxy server:

nodex-ruby proxy/proxy_server.rb

In console 3, run the http client:

nodex-ruby proxy/http_client.rb

PubSub
======

A very simple publish-subscribe server.

Connections can subscribe to topics and unsubscribe from topics. Topics can be any arbitrary string.

When subscribed, connections will receive any messages published to any of the topics it is subscribed to.

The pub-sub server understands the following simple text protocol. Each line is terminated by CR (hit enter on telnet)

To subscribe to a topic:

SUBSCRIBE,<topic_name>

To unsubscribe from a topic:

UNSUBSCRIBE,<topic_name>

To publish a message to a topic:

PUBLISH,<topic_name>,<message>

Where:

<topic_name> is the name of a topic

<message is some string you want to publish

To run the server:

nodex-ruby pubsub/pubsub_server.rb

Then open some more consoles and telnet localhost 8080, and experiment with the protocol.

SendFile
========

Simple web server that uses sendfile to serve content directly from disk to the socket bypassing user space. This is a
very efficient way of serving static files from disk.

The example contains three static pages: index.html, page1.html and page2.html which are all served using sendfile.

To run the server:

nodex-ruby sendfile/sendfile.rb

Then point your browser at http://localhost:8080 and click around

SSL
===

This is like the echo example, but this time using SSL.

To run the server:

nodex-ruby ssl/ssl_server.rb

To run the client:

nodex-ruby ssl/ssl_client.rb

Upload
======

A simple upload server example. The client streams a file from disk to an HTTP request and the server reads the
HTTP request and streams the data to a file on disk.

To run the server:

nodex-ruby upload/upload_server.rb

To run the client:

nodex-ruby upload/upload_client.rb

Websockets
==========

A simple example demonstrating HTML 5 websockets. The example serves a simple page which has some JavaScript in it
to create a websocket to a server, and send and receive data from it.

To run the server:

nodex-ruby websockets/websockets.rb

Then point your browser at: http://localhost:8080

Redis
=====

This example demonstrates a simple HTTP server which responds to HTTP requests to '/' with a page containing a hit counter.
The count is stored in a Redis Server and incremented each time using the Redis INCR command.

To run this example you must have a Redis server running on localhost.

The, to run the example:

nodex-ruby redis/RedisExample

Then point your browser at: http://localhost:8080 and hit refresh a few times






