Node.x planning/ideas/TODO
==========================

Modules
=========

Core modules
============

Net - done
UDP
DNS
STDIO - done
Buffer - done
Composition - partially done
Shared data - done
Node (including Timers, registering handlers) - done
FileSystem - done
ParseTools - done
Http - done

Add on modules
==============
AMQP
Redis - done
STOMP
SMTP
JDBC
MongoDB
Memcached
Spawn
REST
Twitter
FB
Google+
Supervisors
Remote Actors
Socket-IO
Sock-JS
Web framework
JNDI
JMS
SCTP
PGM
ZeroMQ
Gemfire
Distributed events (hook.io style)
Webmachine style

Supported Languages
===================

Java
JRuby                                                        7
Clojure
Groovy
Groovy++
JavaScript (Rhino/Nashorn?)
Jython
Scala


TODO
====
1) Consider wrapping libev in Java API
2) Consider using disruptor https://code.google.com/p/disruptor/ as alternative to concurrent queues
3) SSL exceptions aren't very nice
4) StartTLS
5) endHandler handlers not currently being called - check this
6) Websocket close protocol
7) Synchronous versions of filesystem ops ??
8) Filesystem lock + watch
9) Javadoc
10) Ruby doc
12) Netty needs to implement event loop
13) HTTP server side 100-continue handling
14) Allow to set HTTP response reason
15) Netty should build timers into event loop
19) Make Java nodex methods static ??
20) Package manager and deployment
21) HTTPClient should pool HTTP connections in same way as redis client, i.e. have HTTPPool and HTTPConnection class -
otherwise can't do proper pipelining since can't guarantee same connection.
22) Per thread connection pools. If we can have multiple connection pools, one for each core thread then they don't
need any synchronization.
23) Netclient, Redis and HTTP connection reconnection. Most of the code is there, need to implement timer for reconnect.
24) Look at Redis cluster support in client









